---
name: Build and Push Image

on:
  # we want pull requests so we can build(test) but not push to image registry
  pull_request:
    branches:
      - 'main'
    # only build when important files change
    paths:
      - 'Dockerfile'
      - '.github/workflows/docker-build-and-push.yml'
      - 'docker-entrypoint.sh'
  push:
    branches:
      - 'main'
    # only build when important files change
    paths:
      - 'Dockerfile'
      - '.github/workflows/docker-build-and-push.yml'
      - 'docker-entrypoint.sh'
  schedule:
    # re-run montly to keep image fesh with upstream base images
    - cron: '0 12 15 * *'


jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.4
      -
        name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          # list of Docker images to use as base name for tags
          images: |
            bretfisher/jekyll
            ghcr.io/bretfisher/jekyll
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest
      -
        # we need qemu and buildx so we can build multiple platforms later
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1.1.0
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        # This makes image builds fast!      
        name: Cache Docker layers
        uses: actions/cache@v2.1.5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        # this will build the images, once per platform, 
        # then push to both Docker Hub and GHCR
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          target: jekyll
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          # don't push during a pull_request, only build
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
      -
        name: Show image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      -
# steps for 2nd image jekyll-serve, based on above jekyll image layers
        name: Docker meta jekyll-serve
        id: docker_meta_jekyll_serve
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          # list of Docker images to use as base name for tags
          images: |
            bretfisher/jekyll-serve 
            ghcr.io/bretfisher/jekyll-serve
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest
      -
        # this will build the images, once per platform, then push to both hub and ghcr
        name: Build and push jekyll-serve
        uses: docker/build-push-action@v2
        with:
          target: jekyll-serve
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          # don't push during a pull_request, only build
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta_jekyll_serve.outputs.tags }}
          labels: ${{ steps.docker_meta_jekyll_serve.outputs.labels }} 
      -
        name: Show image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
 